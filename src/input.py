from datetime import datetime
from llm import duckchat_response
from map import get_coordinate
import ipywidgets as widgets
from IPython.display import display

def validate_date_input(start_date_input: str, end_date_input: str) -> int:
    """Validate the date input and calculate the number of days between the two dates.

    Args:
        - start_date_input (str): The start date input by the user. Format: mm/dd or yyyy/mm/dd.
        - end_date_input (str): The end date input by the user. Format: mm/dd or yyyy/mm/dd.
        
    Returns:
        - int: The number of days between the two dates (inclusive).
    """
    
    def parse_date(date_input):
        try:
            # mm/dd format
            parsed_date = datetime.strptime(date_input, "%m/%d")
            parsed_date = parsed_date.replace(year = datetime.now().year)
        except ValueError:
            try:
                # yyyy/mm/dd format
                parsed_date = datetime.strptime(date_input, "%Y/%m/%d")
            except ValueError:
                raise ValueError(f"您輸入的日期格式不正確或該日期不存在，請按照 yyyy/mm/dd 或 mm/dd 格式重新輸入，例如：1/13 或 2024/1/13")
        return parsed_date

    # if constrction of datetime object is successful, then the date is valid
    start_date = parse_date(start_date_input)
    end_date = parse_date(end_date_input)

    if end_date < start_date:
        raise ValueError("結束日期不能早於開始日期，請重新輸入。")

    # calculate the number of days between the two dates (end date included)
    return (end_date - start_date).days + 1

def generate_spot_list(location: str, days: int, preference: list[str]) -> list[tuple[str, float, float, str]]:
    """Generate a list of spots for a trip to a specific location for a certain number of days.
    
    Args:
        - location (str): The location of the trip.
        - days (int): The number of days for the trip.
        - preference (list of str): The user's preferences for the trip, including venue type and attraction theme.
            - `preference[0]`: venue_type (戶外活動, 室內行程, 不限)
            - `preference[1]`: attraction_theme (自然風景, 人文藝術, 購物娛樂, 不限)
            - `preference[2]`: travel_with (一人旅遊, 情侶同行, 好友出遊, 家庭旅行, 不限)
    Returns:
        - list of tuple[str, float, float, str]: A list of spots for the trip. Each spot is represented by a tuple(spot name, latitude, longitude, address).
    """

    # call Taiwan LLM API
    num_spots = 3 * days
    spot_list = list()

    # if the response is not enough, keep asking for more spots
    while len(spot_list) < num_spots:
        prompt = f"""
            - 地點: {location}
            - 遊玩天數: {days} 天
            - 偏好設定：
                場地類型：{preference[0]}
                景點主題：{preference[1]}
                旅行夥伴：{preference[2]}
            以上是使用者的旅遊資訊與偏好，請依序輸出 {num_spots - len(spot_list)} 個真實存在的景點名稱，以供使用者參考。
            景點名稱請一行一個，不需要其他說明文字或編號，範例格式如：台東森林公園\n台東鐵花村。
            請注意，這些景點必須是須符合以下規定
            - 白天能遊玩的景點（像是夜市就不適合）
            - 足夠知名，可在 Google Map 上找到地址
            - 開車能抵達的本島景點，不要位於旗津等離島
            - 景點類型盡量不重複，例如不要同時有 2 個美術館
            請據此篩選景點，並確保推薦結果符合場地類型、活動特性、景點主題與地理位置的設定"""
        
        response = duckchat_response(prompt)
        # remove empty spots and add to the spot_list
        spot_names = [spot for spot in response.split("\n") if spot.strip()]
        for spot_name in spot_names:
            # get the coordinates of the spot
            spot_info = get_coordinate(spot_name)
            if spot_info:
                spot_list.append(spot_info)
            if len(spot_list) >= num_spots:
                break
    
    # num_spots spots are collected
    return spot_list

def tool_input(spot_list):
    """Display the input widgets for the travel planning tool.

    Args:
        - spot_list (list or str): A list to store the spots generated by the tool.
    """
    
    # Basic travel info
    label_location = widgets.Label(value = "想去哪裡玩呢？（請輸入臺灣本島的縣市）")
    text_location = widgets.Text(
        description = "旅遊地點：",
        placeholder = "請輸入目的地，例如 台北"
    )
    label_date = widgets.Label(value = "請輸入您的旅遊日期。日期格式為 mm/dd，例如 1/13；如需跨年請以 yyyy/mm/dd 格式輸入，例如 2024/1/13")
    text_start_date = widgets.Text(
        description = "開始日期：",
        placeholder = "mm/dd 或 yyyy/mm/dd"
    )
    text_end_date = widgets.Text(
        description = "結束日期：",
        placeholder = "mm/dd 或 yyyy/mm/dd"
    )

    # Advanced travel preference
    option_labels = list()
    option_dropdowns = list()
    option_pairs = list()

    # preference[0]: venue_type
    option_labels.append(widgets.Label(value = "你喜歡戶外活動還是室內行程？"))
    option_dropdowns.append(widgets.Dropdown(
        description = "請選擇",
        options = ["戶外活動", "室內行程", "不限"],
        value = "不限",
    ))

    # preference[1]: attraction_theme
    option_labels.append(widgets.Label(value = "你喜歡哪種類型的景點？"))
    option_dropdowns.append(widgets.Dropdown(
        description = "請選擇",
        options = ["自然風景", "人文藝術", "購物娛樂", "不限"],
        value = "不限",
    ))
    
    # prference[2]: travel_with
    option_labels.append(widgets.Label(value = "跟誰一起去？"))
    option_dropdowns.append(widgets.Dropdown(
        description = "請選擇",
        options = ["一人旅遊", "情侶同行", "好友出遊", "家庭旅行", "不限"],
        value = "不限",
    ))

    # Combine all advanced options
    option_pairs = list(zip(option_labels, option_dropdowns))

    # Submit & Result
    submit_button = widgets.Button(description = "提交")
    result_label = widgets.Label(value = "尚未提交任何內容。")
    
    # Submit button handler
    def on_submit_click(b):
        result_label.value = "正在處理您的行程請稍候..."
        try:
            preference = [option.value for option in option_dropdowns]
            location = text_location.value.strip()
            start_date = text_start_date.value.strip()
            end_date = text_end_date.value.strip()

            if not location or not start_date or not end_date:
                result_label.value = "請完整填寫地點和日期！"
                return

            # Validate dates
            days = validate_date_input(start_date, end_date)

            # Generate spots
            spots = generate_spot_list(location, days, preference)
            result_label.value = f"建議的景點有：{', '.join(spot[0] for spot in spots)}"
            spot_list.clear()
            spot_list.extend(spots)

        except ValueError as e:
            result_label.value = str(e)
        except Exception as e:
            result_label.value = f"發生錯誤：{e}"

    # Bind event to button
    submit_button.on_click(on_submit_click)

    # Display widgets
    display(label_location, text_location, label_date, text_start_date, text_end_date, *(item for pair in option_pairs for item in pair), submit_button, result_label)