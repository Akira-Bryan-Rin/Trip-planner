from duck_chat import DuckChat
from openai import OpenAI, APITimeoutError
import asyncio
import nest_asyncio
nest_asyncio.apply()

def duckchat_response(prompt):
    """Generate response from DuckChat AI Chatbot.

    Args:
        - prompt (str): The user's input prompt to generate response.

    Returns:
        - str: The response generated by the model.
    """
    if not isinstance(prompt, str) or not prompt.strip():
        raise ValueError("Prompt must be a non-empty string.")
    
    async def get_response():
        async with DuckChat() as chat:
            response = await chat.ask_question(prompt)
            if response is not None:
                return response
            else:
                raise ValueError("No response from the model.")

    return asyncio.run(get_response())

# TODO: Please add your API key for the model you want to use below.
# If you don't want to pay, you can use the Taiwan LLM model for free, but the response is not guaranteed.
# See https://jayleesc11.notion.site/Taiwan-LLM-13d2ae900ca68047bc5bed258285ae13?pvs=4 for getting the API key.
taiwan_llm_api_key = ""
# If you have paid for the ChatGPT API key, you can use the ChatGPT model.
chatgpt_api_key = ""

# If you want to use the Taiwan LLM model, test the chat UI at it's website.
# https://build.nvidia.com/yentinglin/llama-3-taiwan-70b-instruct
# If it keeps showing "You are XXX in line", then the API key is not available now, please wait for a while.
# If the response is available, then you can use the API key to call the model.
def taiwan_llm_response(prompt):
    """Generate response from Taiwan LLM model.

    Args:
        - prompt (str or list of dict): The user's input prompt / the messages list to generate response.
            For the list of dictionaries type, each dictionary should be in the form {"role": "user/system/assistant", "content": "(message)"}.
            - "role" = "user" for user input
            - "role" = "system" for the initial setting of the assistant
            - "role" = "assistant" for the assistant's response.

    Returns:
        - str: The response generated by the model.
    """

    if taiwan_llm_api_key.strip():
        client = OpenAI(
            base_url = "https://integrate.api.nvidia.com/v1",
            api_key = taiwan_llm_api_key
        )
    else:
        raise ValueError("API key is required.")
    
    # Set the prompt
    if isinstance(prompt, str) and prompt.strip():
        messages = [
            {"role": "system", "content": "你是一個優秀的繁體中文助理，會提供符合使用者需求的回應。"},
            {"role": "user", "content": prompt}
        ]
    elif isinstance(prompt, list) and len(prompt) > 0 and all(isinstance(item, dict) and "role" in item and item["role"] in ["user", "system", "assistant"] and "content" in item and item["content"].strip() for item in prompt):
        messages = prompt
    else:
        raise ValueError("Prompt must be a non-empty string or a list.")

    # Get the response
    try:
        completion = client.chat.completions.create(
            model="yentinglin/llama-3-taiwan-70b-instruct",
            messages = messages,
            temperature = 0.5,
            top_p = 1,
            max_tokens = 2048,
            stream = True,
        )
    except APITimeoutError:
        raise ValueError("No response from the model.")

    # Format the response
    response = ""
    for chunk in completion:
        if chunk.choices[0].delta.content is not None:
            response += chunk.choices[0].delta.content
    if not response.strip():
        raise ValueError("No response from the model.")
    
    return response


def chatgpt_response(prompt):
    """Generate response from Taiwan LLM model.

    Args:
        - prompt (str or list of dict): The user's input prompt / the messages list to generate response.
            For the list of dictionaries type, each dictionary should be in the form {"role": "user/system/assistant", "content": "(message)"}.
            - "role" = "user" for user input
            - "role" = "system" for the initial setting of the assistant
            - "role" = "assistant" for the assistant's response.

    Returns:
        - str: The response generated by the model.
    """
    
    if chatgpt_api_key.strip():
        client = OpenAI(api_key = chatgpt_api_key)
    else:
        raise ValueError("API key is required.")
    
    # Set the prompt
    if isinstance(prompt, str) and prompt.strip():
        messages = [
            {"role": "system", "content": "你是一個優秀的繁體中文助理，會提供符合使用者需求的回應。"},
            {"role": "user", "content": prompt}
        ]
    elif isinstance(prompt, list) and len(prompt) > 0 and all(isinstance(item, dict) and "role" in item and item["role"] in ["user", "system", "assistant"] and "content" in item and item["content"].strip() for item in prompt):
        messages = prompt
    else:
        raise ValueError("Prompt must be a non-empty string or a list.")
    
    # Get the response
    try:
        completion = client.chat.completions.create(model="gpt-4o-mini", messages = messages)
    except APITimeoutError:
        raise ValueError("No response from the model.")
    
    response = completion['choices'][0]['message']['content']
    if response is not None:
        return response
    else:
        raise ValueError("No response from the model.")